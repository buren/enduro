package utils;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;

import sorter.SortFinishTime;
import sorter.SortName;
import sorter.SortStartTime;
import sorter.Sorter;
import models.Participant;
import models.RaceEvent;
import models.Time;

public class Formatter {
	private RaceEvent raceEvent;

	public Formatter(String s) {
		raceEvent = new RaceEvent(Integer.parseInt(s));
	}

	/**
	 * Returns the first line of the file.
	 * 
	 * @param filePath
	 *            - Path to file
	 * @return A string with columns in the format
	 *         "columnOne; columnTwo; columnThree; columnFour" is returned.
	 * @throws FileNotFoundException
	 */
	public String readColumnNames(String filePath) throws FileNotFoundException {
		FileReader f = new FileReader();

		Iterator<String> itr = f.readFileByLine(filePath);
		String columns;
		if (itr.hasNext()) {
			columns = itr.next();
		} else {
			throw new IllegalStateException("Indatafilen Ã¤r tom.");
		}
		return columns;
	}

	/**
	 * Generates a result table generated by parameters.
	 * @param pathToStartFile , URL-address of start file.
	 * @param pathToFinishFile , URL-address of finish file.
	 * @param pathToNameFile , URL-address of name file.
	 * @return result table
	 * @throws FileNotFoundException
	 */
	public String generateResultList(String pathToStartFile,
			String pathToFinishFile, String pathToNameFile, int lapAmount)
			throws FileNotFoundException {

		Sorter sort = new SortName();
		sort.insertInfo(pathToNameFile, "Namn", raceEvent);
		sort = new SortFinishTime();
		Participant p = new Participant(1);
		sort.insertInfo(pathToFinishFile, "Maltider", raceEvent);
		sort = new SortStartTime();
		p = new Participant(1);
		sort.insertInfo(pathToStartFile, "StartTider", raceEvent);
		int count = raceEvent.size();
		StringBuilder sb = new StringBuilder();
		sb.append("StartNo; Name; #Laps; TotalTime; ");
		for (int i = 1; i <= lapAmount; i++) {
			sb.append("Lap" + i + "; ");
		}
		sb.append("Start; ");
		for (int i = 1; i < lapAmount; i++) {
			sb.append("Checkpoint" + i + "; ");

		}
		sb.append("Finish\n");
		for (int i = 0; i < count; i++) {
			Time totalTime = raceEvent.getStart(new Participant(i + 1))
					.compareTo(raceEvent.getFinish(new Participant(i + 1)));
			sb.append(i
					+ 1
					+ "; "
					+ raceEvent.getName(new Participant(i + 1))
					+ "; "
					+ (raceEvent.getRace(new Participant(i + 1))
							.getCurrentLap()) + "; " + totalTime + "; "
					+ printTotalLapTimes(new Participant(i + 1), lapAmount)
					+ printActualLapTimes(new Participant(i + 1), lapAmount)

					+ raceEvent.getFinish(new Participant(i + 1)) + "\n");
		}
		return sb.toString();
	}

	/**
	 * returns the total lap time of the first n laps (determined by parameter) made by parameter participant
	 * @param participant
	 * @param lapAmount
	 * @return
	 */
	public String printTotalLapTimes(Participant participant, int lapAmount) {
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i <= lapAmount; i++) {

			sb.append(raceEvent.getRace(participant).getLapTime(i));
			sb.append("; ");
		}
		return sb.toString();
	}

	/**
	 * returns the total amount of laps made by parameter participant
	 * @param participant
	 * @param lapAmount
	 * @return
	 */
	public String printActualLapTimes(Participant participant, int lapAmount) {
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i <= lapAmount; i++) {
			sb.append(raceEvent.getRace(participant).getLapStartTime(i));
			sb.append("; ");
		}
		return sb.toString();
	}

}
